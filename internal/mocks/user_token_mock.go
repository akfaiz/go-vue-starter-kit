// Code generated by MockGen. DO NOT EDIT.
// Source: user_token.go
//
// Generated by this command:
//
//	mockgen -source=user_token.go -destination=../mocks/user_token_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/akfaiz/go-vue-starter-kit/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserTokenRepository is a mock of UserTokenRepository interface.
type MockUserTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockUserTokenRepositoryMockRecorder is the mock recorder for MockUserTokenRepository.
type MockUserTokenRepositoryMockRecorder struct {
	mock *MockUserTokenRepository
}

// NewMockUserTokenRepository creates a new mock instance.
func NewMockUserTokenRepository(ctrl *gomock.Controller) *MockUserTokenRepository {
	mock := &MockUserTokenRepository{ctrl: ctrl}
	mock.recorder = &MockUserTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserTokenRepository) EXPECT() *MockUserTokenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserTokenRepository) Create(ctx context.Context, token *domain.UserToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserTokenRepositoryMockRecorder) Create(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserTokenRepository)(nil).Create), ctx, token)
}

// Delete mocks base method.
func (m *MockUserTokenRepository) Delete(ctx context.Context, userID int64, tokenType domain.TokenType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, tokenType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserTokenRepositoryMockRecorder) Delete(ctx, userID, tokenType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserTokenRepository)(nil).Delete), ctx, userID, tokenType)
}

// FindOne mocks base method.
func (m *MockUserTokenRepository) FindOne(ctx context.Context, userID int64, tokenType domain.TokenType) (*domain.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, userID, tokenType)
	ret0, _ := ret[0].(*domain.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockUserTokenRepositoryMockRecorder) FindOne(ctx, userID, tokenType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserTokenRepository)(nil).FindOne), ctx, userID, tokenType)
}
